import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Play, RotateCcw, Trophy, Users, Settings, Plus, Edit, Trash2, Download, Upload, Monitor, UserCog, Tv } from 'lucide-react';
import defaultQuestions from './questions.json';

interface Question {
  category: string;
  question: string;
  options: string[];
  answer: string;
  explanation: string;
}

type AppMode = 'landing' | 'bigscreen' | 'host';

const TriviaApp = () => {
  const [appMode, setAppMode] = useState<AppMode>('landing');
  const [currentSlide, setCurrentSlide] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false); // Controls big screen answer display
  const [timer, setTimer] = useState(30);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [firstQuestionStarted, setFirstQuestionStarted] = useState(false);
  const [adminMode, setAdminMode] = useState(false);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [editingQuestion, setEditingQuestion] = useState<Question | null>(null);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [questionLimit, setQuestionLimit] = useState<number | null>(null);
  const [timeLimit, setTimeLimit] = useState(30);
  const [timedRounds, setTimedRounds] = useState(true);
  const [gameTitle, setGameTitle] = useState('TRIVIA NIGHT');
  const [gameSubtitle, setGameSubtitle] = useState('Get Ready to Play!');
  const [showQuestionCounter, setShowQuestionCounter] = useState(false);
  const [showWaitScreen, setShowWaitScreen] = useState(true);
  const [newQuestion, setNewQuestion] = useState<Question>({
    category: '',
    question: '',
    options: ['', '', '', ''],
    answer: '',
    explanation: ''
  });

  useEffect(() => {
    const savedQuestions = localStorage.getItem('triviaQuestions');
    if (savedQuestions) {
      setQuestions(JSON.parse(savedQuestions));
    } else {
      setQuestions(defaultQuestions as Question[]);
    }

    // Load shared game state
    const savedGameState = localStorage.getItem('triviaGameState');
    if (savedGameState) {
      const gameState = JSON.parse(savedGameState);
      setGameStarted(gameState.gameStarted || false);
      setFirstQuestionStarted(gameState.firstQuestionStarted || false);
      setCurrentSlide(gameState.currentSlide || 0);
      setShowAnswer(gameState.showAnswer || false);
      setTimer(gameState.timer || timeLimit);
      setIsTimerRunning(gameState.isTimerRunning || false);
      setSelectedCategories(gameState.selectedCategories || []);
      setQuestionLimit(gameState.questionLimit || null);
      setTimeLimit(gameState.timeLimit || 30);
      setTimedRounds(gameState.timedRounds !== undefined ? gameState.timedRounds : true);
      setGameTitle(gameState.gameTitle || 'TRIVIA NIGHT');
      setGameSubtitle(gameState.gameSubtitle || 'Get Ready to Play!');
      setShowQuestionCounter(gameState.showQuestionCounter !== undefined ? gameState.showQuestionCounter : false);
      setShowWaitScreen(gameState.showWaitScreen !== undefined ? gameState.showWaitScreen : true);
    }
  }, []);

  const saveQuestions = (updatedQuestions: Question[]) => {
    setQuestions(updatedQuestions);
    localStorage.setItem('triviaQuestions', JSON.stringify(updatedQuestions));
  };

  const saveGameState = () => {
    // Only save from Host Mode to avoid conflicts
    if (appMode === 'host') {
      const gameState = {
        gameStarted,
        firstQuestionStarted,
        currentSlide,
        showAnswer,
        timer,
        isTimerRunning,
        selectedCategories,
        questionLimit,
        timeLimit,
        timedRounds,
        gameTitle,
        gameSubtitle,
        showQuestionCounter,
        showWaitScreen
      };
      localStorage.setItem('triviaGameState', JSON.stringify(gameState));
      
      // Trigger storage event for other tabs
      window.dispatchEvent(new StorageEvent('storage', {
        key: 'triviaGameState',
        newValue: JSON.stringify(gameState)
      }));
    }
  };

  const getFilteredQuestions = () => {
    let filtered = selectedCategories.length === 0 
      ? questions 
      : questions.filter(q => selectedCategories.includes(q.category));
    
    if (questionLimit && questionLimit > 0) {
      filtered = filtered.slice(0, questionLimit);
    }
    
    return filtered;
  };

  const getAvailableCategories = () => {
    return [...new Set(questions.map(q => q.category))];
  };

  const filteredQuestions = getFilteredQuestions();

  useEffect(() => {
    let interval;
    if (isTimerRunning && timer > 0) {
      interval = setInterval(() => {
        setTimer(prev => prev - 1);
        saveGameState();
      }, 1000);
    } else if (timer === 0) {
      setIsTimerRunning(false);
      saveGameState();
    }
    return () => clearInterval(interval);
  }, [isTimerRunning, timer]);

  // Listen for game state changes from other tabs
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'triviaGameState' && e.newValue && appMode === 'bigscreen') {
        // Only sync to Big Screen Mode to avoid conflicts in Host Mode
        const gameState = JSON.parse(e.newValue);
        setGameStarted(gameState.gameStarted || false);
        setFirstQuestionStarted(gameState.firstQuestionStarted || false);
        setCurrentSlide(gameState.currentSlide || 0);
        setShowAnswer(gameState.showAnswer || false);
        setTimer(gameState.timer || timeLimit);
        setIsTimerRunning(gameState.isTimerRunning || false);
        setSelectedCategories(gameState.selectedCategories || []);
        setQuestionLimit(gameState.questionLimit || null);
        setTimeLimit(gameState.timeLimit || 30);
        setTimedRounds(gameState.timedRounds !== undefined ? gameState.timedRounds : true);
        setGameTitle(gameState.gameTitle || 'TRIVIA NIGHT');
        setGameSubtitle(gameState.gameSubtitle || 'Get Ready to Play!');
        setShowQuestionCounter(gameState.showQuestionCounter !== undefined ? gameState.showQuestionCounter : false);
        setShowWaitScreen(gameState.showWaitScreen !== undefined ? gameState.showWaitScreen : true);
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [timeLimit, appMode]);

  const nextSlide = () => {
    if (currentSlide < filteredQuestions.length - 1) {
      setCurrentSlide(currentSlide + 1);
      setShowAnswer(false);
      setFirstQuestionStarted(!showWaitScreen); // Only reset to wait screen if option enabled
      resetTimer();
      saveGameState();
    }
  };

  const prevSlide = () => {
    if (currentSlide > 0) {
      setCurrentSlide(currentSlide - 1);
      setShowAnswer(false);
      setFirstQuestionStarted(!showWaitScreen); // Only reset to wait screen if option enabled
      resetTimer();
      saveGameState();
    }
  };

  const toggleBigScreenAnswer = () => {
    const newShowAnswer = !showAnswer;
    setShowAnswer(newShowAnswer);
    setIsTimerRunning(false);
    
    // Force immediate save and trigger event
    const gameState = {
      gameStarted,
      firstQuestionStarted,
      currentSlide,
      showAnswer: newShowAnswer,
      timer,
      isTimerRunning: false,
      selectedCategories,
      questionLimit,
      timeLimit,
      timedRounds,
      gameTitle,
      gameSubtitle,
      showQuestionCounter,
      showWaitScreen
    };
    localStorage.setItem('triviaGameState', JSON.stringify(gameState));
    
    // Trigger storage event for other tabs
    window.dispatchEvent(new StorageEvent('storage', {
      key: 'triviaGameState',
      newValue: JSON.stringify(gameState)
    }));
  };

  const startTimer = () => {
    setIsTimerRunning(true);
    setFirstQuestionStarted(true);
    saveGameState();
  };

  const showQuestion = () => {
    setFirstQuestionStarted(true);
    
    // Force immediate save and trigger event
    const gameState = {
      gameStarted,
      firstQuestionStarted: true,
      currentSlide,
      showAnswer,
      timer,
      isTimerRunning,
      selectedCategories,
      questionLimit,
      timeLimit,
      timedRounds,
      gameTitle,
      gameSubtitle,
      showQuestionCounter,
      showWaitScreen
    };
    localStorage.setItem('triviaGameState', JSON.stringify(gameState));
    
    // Trigger storage event for other tabs
    window.dispatchEvent(new StorageEvent('storage', {
      key: 'triviaGameState',
      newValue: JSON.stringify(gameState)
    }));
  };

  const resetTimer = () => {
    setTimer(timeLimit);
    setIsTimerRunning(false);
  };

  const resetGame = () => {
    setCurrentSlide(0);
    setShowAnswer(false);
    setGameStarted(false);
    setFirstQuestionStarted(false);
    resetTimer();
    saveGameState();
  };

  const endGame = () => {
    setGameStarted(false);
    setFirstQuestionStarted(false);
    setCurrentSlide(0);
    setShowAnswer(false);
    resetTimer();
    // Force immediate save and trigger event
    const gameState = {
      gameStarted: false,
      firstQuestionStarted: false,
      currentSlide: 0,
      showAnswer: false,
      timer: timeLimit,
      isTimerRunning: false,
      selectedCategories,
      questionLimit,
      timeLimit,
      timedRounds,
      gameTitle,
      gameSubtitle,
      showQuestionCounter,
      showWaitScreen
    };
    localStorage.setItem('triviaGameState', JSON.stringify(gameState));
    
    // Trigger storage event for other tabs
    window.dispatchEvent(new StorageEvent('storage', {
      key: 'triviaGameState',
      newValue: JSON.stringify(gameState)
    }));
    
    setAppMode('landing');
  };

  const startGame = () => {
    setGameStarted(true);
    setFirstQuestionStarted(false);
    setCurrentSlide(0);
    setShowAnswer(false);
    resetTimer();
    
    // Force immediate save and trigger event for game start
    const gameState = {
      gameStarted: true,
      firstQuestionStarted: false,
      currentSlide: 0,
      showAnswer: false,
      timer: timeLimit,
      isTimerRunning: false,
      selectedCategories,
      questionLimit,
      timeLimit,
      timedRounds,
      gameTitle,
      gameSubtitle,
      showQuestionCounter,
      showWaitScreen
    };
    localStorage.setItem('triviaGameState', JSON.stringify(gameState));
    
    // Trigger storage event for other tabs
    window.dispatchEvent(new StorageEvent('storage', {
      key: 'triviaGameState',
      newValue: JSON.stringify(gameState)
    }));
  };

  const addQuestion = () => {
    if (newQuestion.question && newQuestion.answer && newQuestion.options.every(opt => opt)) {
      const updatedQuestions = [...questions, newQuestion];
      saveQuestions(updatedQuestions);
      setNewQuestion({
        category: '',
        question: '',
        options: ['', '', '', ''],
        answer: '',
        explanation: ''
      });
    }
  };

  const updateQuestion = (index: number, updatedQuestion: Question) => {
    const updatedQuestions = [...questions];
    updatedQuestions[index] = updatedQuestion;
    saveQuestions(updatedQuestions);
    setEditingQuestion(null);
  };

  const deleteQuestion = (index: number) => {
    const updatedQuestions = questions.filter((_, i) => i !== index);
    saveQuestions(updatedQuestions);
    if (currentSlide >= updatedQuestions.length) {
      setCurrentSlide(Math.max(0, updatedQuestions.length - 1));
    }
  };

  const exportQuestions = () => {
    const dataStr = JSON.stringify(questions, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    const exportFileDefaultName = 'trivia-questions.json';
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const importQuestions = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const imported = JSON.parse(e.target?.result as string);
          if (Array.isArray(imported)) {
            saveQuestions(imported);
            setCurrentSlide(0);
          }
        } catch (error) {
          alert('Invalid JSON file');
        }
      };
      reader.readAsText(file);
    }
  };

  // Landing Screen
  if (appMode === 'landing') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-amber-900 flex items-center justify-center p-8 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-amber-100/5 via-transparent to-emerald-900/10"></div>
        <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400"></div>
        <div className="text-center text-white max-w-6xl relative z-10">
          <div className="mb-12">
            <Trophy className="w-32 h-32 mx-auto mb-8 text-amber-300 drop-shadow-lg" />
            <h1 className="text-7xl font-bold mb-6 bg-gradient-to-r from-amber-300 via-yellow-300 to-amber-400 bg-clip-text text-transparent drop-shadow-2xl">
              {gameTitle}
            </h1>
            <p className="text-3xl text-amber-100 mb-12 font-light tracking-wide">Choose Your Experience</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-5xl mx-auto">
            {/* Big Screen Mode */}
            <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-8 border-2 border-amber-400/30 shadow-2xl relative hover:border-amber-400/50 transition-all duration-300 transform hover:scale-105">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-amber-400 rotate-45"></div>
              <Tv className="w-16 h-16 mx-auto mb-6 text-emerald-300" />
              <h2 className="text-3xl font-bold mb-4 text-amber-100">Big Screen Mode</h2>
              <p className="text-lg text-amber-200 mb-8">
                Perfect for projectors and TVs. Clean display for your audience with questions, options, and answers.
              </p>
              <button
                onClick={() => setAppMode('bigscreen')}
                className="bg-gradient-to-r from-emerald-600 to-emerald-800 hover:from-emerald-500 hover:to-emerald-700 text-white text-xl font-bold py-4 px-8 rounded-full transition-all duration-300 shadow-lg border-2 border-emerald-400/50 w-full"
              >
                <Monitor className="w-6 h-6 mr-3 inline" />
                Launch Big Screen
              </button>
            </div>

            {/* Host Mode */}
            <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-8 border-2 border-amber-400/30 shadow-2xl relative hover:border-amber-400/50 transition-all duration-300 transform hover:scale-105">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-amber-400 rotate-45"></div>
              <UserCog className="w-16 h-16 mx-auto mb-6 text-amber-300" />
              <h2 className="text-3xl font-bold mb-4 text-amber-100">Host Mode</h2>
              <p className="text-lg text-amber-200 mb-8">
                Full control interface with question management, category selection, timer controls, and game progression.
              </p>
              <button
                onClick={() => setAppMode('host')}
                className="bg-gradient-to-r from-amber-600 to-amber-800 hover:from-amber-500 hover:to-amber-700 text-black text-xl font-bold py-4 px-8 rounded-full transition-all duration-300 shadow-lg border-2 border-amber-400 w-full"
              >
                <Settings className="w-6 h-6 mr-3 inline" />
                Launch Host Panel
              </button>
            </div>
          </div>

          <div className="mt-12 text-amber-300 text-lg">
            {questions.length} questions available across {getAvailableCategories().length} categories
          </div>
        </div>
      </div>
    );
  }

  if (questions.length === 0) {
    return <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-amber-900 flex items-center justify-center text-amber-200 text-2xl">Loading...</div>;
  }

  // Big Screen Mode - Clean display for projection
  if (appMode === 'bigscreen') {
    if (!gameStarted) {
      return (
        <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-amber-900 flex items-center justify-center p-8 relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-br from-amber-100/5 via-transparent to-emerald-900/10"></div>
          <div className="absolute top-0 left-0 w-full h-4 bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400"></div>
          <div className="text-center text-white max-w-6xl relative z-10">
            <Trophy className="w-40 h-40 mx-auto mb-12 text-amber-300 drop-shadow-lg" />
            <h1 className="text-8xl font-bold mb-8 bg-gradient-to-r from-amber-300 via-yellow-300 to-amber-400 bg-clip-text text-transparent drop-shadow-2xl">
              {gameTitle}
            </h1>
            <p className="text-4xl text-amber-100 mb-16 font-light tracking-wide">{gameSubtitle}</p>
            <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-12 border-2 border-amber-400/30 shadow-2xl relative">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-12 h-12 bg-amber-400 rotate-45"></div>
              <p className="text-2xl text-amber-200 mb-4">Waiting for host to start the game...</p>
              {showQuestionCounter && (
                <div className="text-xl text-amber-300">
                  {filteredQuestions.length} questions ready • {getAvailableCategories().length} categories
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }

    // Game started but first question hasn't started yet - show ready screen (if wait screen enabled)
    if (gameStarted && !firstQuestionStarted && showWaitScreen) {
      return (
        <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-amber-900 flex items-center justify-center p-8 relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-br from-amber-100/5 via-transparent to-emerald-900/10"></div>
          <div className="absolute top-0 left-0 w-full h-4 bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400"></div>
          <div className="text-center text-white max-w-6xl relative z-10">
            <Trophy className="w-64 h-64 mx-auto text-amber-300 drop-shadow-2xl animate-pulse" />
          </div>
        </div>
      );
    }

    const currentQuestion = filteredQuestions[currentSlide];
    if (!currentQuestion) return null;

    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-amber-900 text-white relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-amber-100/5 via-transparent to-emerald-900/10"></div>
        <div className="absolute top-0 left-0 w-full h-4 bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400"></div>
        <div className="relative z-10 p-8">
          
          {/* Header */}
          <div className="text-center mb-12">
            <div className="flex items-center justify-center space-x-6 mb-8">
              <Trophy className="w-12 h-12 text-amber-300" />
              <h1 className="text-4xl font-bold text-amber-100">{gameTitle}</h1>
              {showQuestionCounter && (
                <div className="text-2xl text-amber-300">
                  {currentSlide + 1} / {filteredQuestions.length}
                </div>
              )}
            </div>
          </div>

          {/* Main Question Area */}
          <div className="max-w-7xl mx-auto">
            <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-16 border-2 border-amber-400/30 shadow-2xl relative">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-12 h-12 bg-amber-400 rotate-45"></div>
              
              {/* Category */}
              <div className="text-center mb-12">
                <span className="bg-gradient-to-r from-amber-400 to-yellow-400 text-black px-8 py-3 rounded-full text-2xl font-bold border-2 border-amber-300 shadow-lg">
                  {currentQuestion.category}
                </span>
              </div>

              {/* Question */}
              <div className="text-center mb-16">
                <h2 className="text-5xl font-bold mb-8 leading-tight text-amber-100">
                  {currentQuestion.question}
                </h2>
              </div>

              {/* Options */}
              <div className="grid grid-cols-2 gap-8 mb-12">
                {currentQuestion.options.map((option, index) => (
                  <div
                    key={index}
                    className={`p-8 rounded-2xl border-2 text-center text-2xl font-semibold transition-all duration-500 relative ${
                      showAnswer && option === currentQuestion.answer
                        ? 'bg-emerald-600/40 border-emerald-400 text-emerald-100 shadow-lg scale-105'
                        : showAnswer && option !== currentQuestion.answer
                        ? 'bg-red-600/20 border-red-400/50 text-red-200'
                        : 'bg-black/30 border-amber-400/30 text-amber-100'
                    }`}
                  >
                    <div className="flex items-center justify-center space-x-4">
                      <span className="w-12 h-12 bg-amber-600 rounded-full flex items-center justify-center text-xl font-bold text-black border border-amber-400">
                        {String.fromCharCode(65 + index)}
                      </span>
                      <span>{option}</span>
                    </div>
                  </div>
                ))}
              </div>

              {/* Answer Explanation */}
              {showAnswer && (
                <div className="bg-emerald-600/20 border-2 border-emerald-400/50 rounded-2xl p-8 text-center relative">
                  <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-emerald-400 rotate-45"></div>
                  <h3 className="text-3xl font-bold text-emerald-300 mb-4">
                    Correct Answer: {currentQuestion.answer}
                  </h3>
                  <p className="text-xl text-emerald-100">{currentQuestion.explanation}</p>
                </div>
              )}

              {/* Timer Display */}
              {timedRounds && isTimerRunning && (
                <div className="text-center mt-8">
                  <div className={`text-6xl font-bold ${timer <= 10 ? 'text-red-400' : 'text-emerald-400'}`}>
                    {timer}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Host Mode - Full control interface
  if (!gameStarted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-amber-900 text-white relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-amber-100/5 via-transparent to-emerald-900/10"></div>
        <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400"></div>
        <div className="relative z-10 p-8">
          
          {/* Host Header */}
          <div className="flex justify-between items-center mb-8">
            <div className="flex items-center space-x-4">
              <Trophy className="w-10 h-10 text-amber-300" />
              <div>
                <h1 className="text-3xl font-bold text-amber-100">Host Control Panel</h1>
                <p className="text-amber-300">Manage your trivia game</p>
              </div>
            </div>
            <button
              onClick={() => setAppMode('landing')}
              className="bg-black/40 hover:bg-black/60 text-amber-100 px-4 py-2 rounded-lg border border-amber-400/30"
            >
              ← Back to Menu
            </button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            {/* Game Setup */}
            <div className="lg:col-span-2">
              <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-8 border-2 border-amber-400/30 shadow-2xl relative mb-8">
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-amber-400 rotate-45"></div>
                <h2 className="text-2xl font-bold text-amber-100 mb-6">Game Setup</h2>
                
                {/* Game Settings */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                  {/* Question Limit */}
                  <div>
                    <label className="block text-sm font-semibold text-amber-200 mb-2">Number of Questions</label>
                    <select
                      value={questionLimit || ''}
                      onChange={(e) => {
                        setQuestionLimit(e.target.value ? parseInt(e.target.value) : null);
                        saveGameState();
                      }}
                      className="w-full bg-black/30 border border-amber-400/30 rounded-lg px-3 py-2 text-amber-100"
                    >
                      <option value="">All Questions</option>
                      <option value="5">5 Questions</option>
                      <option value="10">10 Questions</option>
                      <option value="15">15 Questions</option>
                      <option value="20">20 Questions</option>
                      <option value="25">25 Questions</option>
                      <option value="30">30 Questions</option>
                    </select>
                  </div>

                  {/* Time Limit */}
                  <div>
                    <label className="block text-sm font-semibold text-amber-200 mb-2">Time Per Question</label>
                    <select
                      value={timeLimit}
                      onChange={(e) => {
                        setTimeLimit(parseInt(e.target.value));
                        saveGameState();
                      }}
                      disabled={!timedRounds}
                      className="w-full bg-black/30 border border-amber-400/30 rounded-lg px-3 py-2 text-amber-100 disabled:opacity-50"
                    >
                      <option value="15">15 seconds</option>
                      <option value="30">30 seconds</option>
                      <option value="45">45 seconds</option>
                      <option value="60">1 minute</option>
                      <option value="90">1.5 minutes</option>
                      <option value="120">2 minutes</option>
                    </select>
                  </div>

                  {/* Timed Rounds Toggle */}
                  <div>
                    <label className="block text-sm font-semibold text-amber-200 mb-2">Timer Settings</label>
                    <label className="flex items-center space-x-3 bg-black/20 border border-amber-400/30 rounded-lg px-3 py-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={timedRounds}
                        onChange={(e) => {
                          setTimedRounds(e.target.checked);
                          saveGameState();
                        }}
                        className="w-4 h-4 text-emerald-600 bg-black/30 border-amber-400/30 rounded focus:ring-emerald-500"
                      />
                      <span className="text-amber-100">Enable Timer</span>
                    </label>
                  </div>
                </div>

                {/* Display Settings */}
                <div className="mb-6">
                  <label className="block text-lg font-semibold text-amber-200 mb-4">Display Settings</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <label className="block text-sm font-semibold text-amber-200 mb-2">Game Title</label>
                      <input
                        type="text"
                        value={gameTitle}
                        onChange={(e) => {
                          const newValue = e.target.value;
                          setGameTitle(newValue);
                          
                          // Force immediate save and trigger event with new value
                          const gameState = {
                            gameStarted,
                            firstQuestionStarted,
                            currentSlide,
                            showAnswer,
                            timer,
                            isTimerRunning,
                            selectedCategories,
                            questionLimit,
                            timeLimit,
                            timedRounds,
                            gameTitle: newValue,
                            gameSubtitle,
                            showQuestionCounter,
                            showWaitScreen
                          };
                          localStorage.setItem('triviaGameState', JSON.stringify(gameState));
                          
                          // Trigger storage event for other tabs
                          window.dispatchEvent(new StorageEvent('storage', {
                            key: 'triviaGameState',
                            newValue: JSON.stringify(gameState)
                          }));
                        }}
                        className="w-full bg-black/30 border border-amber-400/30 rounded-lg px-3 py-2 text-amber-100"
                        placeholder="TRIVIA NIGHT"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-amber-200 mb-2">Game Subtitle</label>
                      <input
                        type="text"
                        value={gameSubtitle}
                        onChange={(e) => {
                          const newValue = e.target.value;
                          setGameSubtitle(newValue);
                          
                          // Force immediate save and trigger event with new value
                          const gameState = {
                            gameStarted,
                            firstQuestionStarted,
                            currentSlide,
                            showAnswer,
                            timer,
                            isTimerRunning,
                            selectedCategories,
                            questionLimit,
                            timeLimit,
                            timedRounds,
                            gameTitle,
                            gameSubtitle: newValue,
                            showQuestionCounter,
                            showWaitScreen
                          };
                          localStorage.setItem('triviaGameState', JSON.stringify(gameState));
                          
                          // Trigger storage event for other tabs
                          window.dispatchEvent(new StorageEvent('storage', {
                            key: 'triviaGameState',
                            newValue: JSON.stringify(gameState)
                          }));
                        }}
                        className="w-full bg-black/30 border border-amber-400/30 rounded-lg px-3 py-2 text-amber-100"
                        placeholder="Get Ready to Play!"
                      />
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-semibold text-amber-200 mb-2">Question Info</label>
                      <label className="flex items-center space-x-3 bg-black/20 border border-amber-400/30 rounded-lg px-3 py-2 cursor-pointer">
                        <input
                          type="checkbox"
                          checked={showQuestionCounter}
                          onChange={(e) => {
                            const newValue = e.target.checked;
                            setShowQuestionCounter(newValue);
                            
                            // Force immediate save and trigger event
                            const gameState = {
                              gameStarted,
                              firstQuestionStarted,
                              currentSlide,
                              showAnswer,
                              timer,
                              isTimerRunning,
                              selectedCategories,
                              questionLimit,
                              timeLimit,
                              timedRounds,
                              gameTitle,
                              gameSubtitle,
                              showQuestionCounter: newValue,
                              showWaitScreen
                            };
                            localStorage.setItem('triviaGameState', JSON.stringify(gameState));
                            
                            // Trigger storage event for other tabs
                            window.dispatchEvent(new StorageEvent('storage', {
                              key: 'triviaGameState',
                              newValue: JSON.stringify(gameState)
                            }));
                          }}
                          className="w-4 h-4 text-emerald-600 bg-black/30 border-amber-400/30 rounded focus:ring-emerald-500"
                        />
                        <span className="text-amber-100">Show Question & Category Count</span>
                      </label>
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-amber-200 mb-2">Wait Screen</label>
                      <label className="flex items-center space-x-3 bg-black/20 border border-amber-400/30 rounded-lg px-3 py-2 cursor-pointer">
                        <input
                          type="checkbox"
                          checked={showWaitScreen}
                          onChange={(e) => {
                            setShowWaitScreen(e.target.checked);
                            saveGameState();
                          }}
                          className="w-4 h-4 text-emerald-600 bg-black/30 border-amber-400/30 rounded focus:ring-emerald-500"
                        />
                        <span className="text-amber-100">Show Wait Between Questions</span>
                      </label>
                    </div>
                  </div>
                </div>

                {/* Category Selection */}
                <div className="mb-6">
                  <label className="block text-lg font-semibold text-amber-200 mb-4">Select Categories</label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {getAvailableCategories().map((category) => (
                      <button
                        key={category}
                        onClick={() => {
                          setSelectedCategories(prev => {
                            const newCategories = prev.includes(category) 
                              ? prev.filter(c => c !== category)
                              : [...prev, category];
                            saveGameState();
                            return newCategories;
                          });
                        }}
                        className={`p-3 rounded-lg border-2 text-sm font-semibold transition-all ${
                          selectedCategories.includes(category)
                            ? 'bg-emerald-600/40 border-emerald-400 text-emerald-100'
                            : 'bg-black/30 border-amber-400/30 text-amber-100 hover:border-amber-400/50'
                        }`}
                      >
                        {category}
                      </button>
                    ))}
                  </div>
                  <div className="mt-3 text-sm text-amber-300">
                    {selectedCategories.length === 0 ? `All categories selected (${filteredQuestions.length} questions)` : `${filteredQuestions.length} questions selected`}
                  </div>
                </div>

                {/* Start Game Button */}
                <button
                  onClick={startGame}
                  disabled={filteredQuestions.length === 0}
                  className="w-full bg-gradient-to-r from-emerald-600 to-emerald-800 hover:from-emerald-500 hover:to-emerald-700 disabled:from-gray-600 disabled:to-gray-800 text-white text-xl font-bold py-4 px-8 rounded-xl transition-all duration-300 shadow-lg border-2 border-emerald-400/50 disabled:border-gray-600/50"
                >
                  <Play className="w-6 h-6 mr-3 inline" />
                  {filteredQuestions.length === 0 ? 'No Questions Available - Check Settings' : `Start Trivia Game (${filteredQuestions.length} questions)`}
                </button>
              </div>

              {/* Question Management */}
              {!adminMode && (
                <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-8 border-2 border-amber-400/30 shadow-2xl relative">
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-amber-400 rotate-45"></div>
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-amber-100">Question Library</h2>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => setAdminMode(true)}
                      className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center border border-emerald-400/50"
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      Manage Questions
                    </button>
                    <input
                      type="file"
                      accept=".json"
                      onChange={importQuestions}
                      className="hidden"
                      id="importFile"
                    />
                    <label
                      htmlFor="importFile"
                      className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center cursor-pointer border border-emerald-400/50"
                    >
                      <Upload className="w-4 h-4 mr-2" />
                      Import
                    </label>
                    <button
                      onClick={exportQuestions}
                      className="bg-amber-600 hover:bg-amber-700 text-black px-4 py-2 rounded-lg font-semibold transition-colors flex items-center border border-amber-400"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Export
                    </button>
                  </div>
                </div>

                <div className="space-y-2 max-h-60 overflow-y-auto">
                  {questions.slice(0, 10).map((q, index) => (
                    <div key={index} className="bg-black/30 p-4 rounded-lg flex justify-between items-center border border-amber-400/20">
                      <div className="flex-1">
                        <span className="text-sm text-amber-300">{q.category}</span>
                        <p className="font-medium text-amber-100 truncate">{q.question}</p>
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => setEditingQuestion(q)}
                          className="bg-amber-600 hover:bg-amber-700 text-black p-2 rounded-lg border border-amber-400"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => deleteQuestion(index)}
                          className="bg-red-600 hover:bg-red-700 text-white p-2 rounded-lg"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                  {questions.length > 10 && (
                    <div className="text-center text-amber-300 text-sm pt-2">
                      ... and {questions.length - 10} more questions
                    </div>
                  )}
                </div>
              </div>
              )}
            </div>

            {/* Game Stats */}
            <div className="space-y-6">
              <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-6 border-2 border-amber-400/30 shadow-2xl relative">
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-amber-400 rotate-45"></div>
                <h3 className="text-xl font-bold text-amber-100 mb-4">Game Stats</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-amber-200">Total Questions:</span>
                    <span className="text-amber-100 font-semibold">{questions.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-amber-200">Categories:</span>
                    <span className="text-amber-100 font-semibold">{getAvailableCategories().length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-amber-200">Selected:</span>
                    <span className="text-emerald-300 font-semibold">{filteredQuestions.length}</span>
                  </div>
                </div>
              </div>

              <div className="bg-black/40 backdrop-blur-lg rounded-3xl p-6 border-2 border-amber-400/30 shadow-2xl relative">
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-amber-400 rotate-45"></div>
                <h3 className="text-xl font-bold text-amber-100 mb-4">Instructions</h3>
                <div className="space-y-2 text-sm text-amber-200">
                  <p>1. Select categories for your game</p>
                  <p>2. Open Big Screen Mode on your display</p>
                  <p>3. Start the game from this control panel</p>
                  <p>4. Control progression and reveals</p>
                </div>
                
                {filteredQuestions.length === 0 && (
                  <div className="mt-4 p-3 bg-red-600/20 border border-red-400/50 rounded-lg">
                    <h4 className="text-red-300 font-semibold mb-2">⚠️ No Questions Available</h4>
                    <div className="text-sm text-red-200">
                      <p>• Total questions in library: {questions.length}</p>
                      <p>• Selected categories: {selectedCategories.length === 0 ? 'All' : selectedCategories.join(', ')}</p>
                      <p>• Question limit: {questionLimit || 'None'}</p>
                      {questions.length === 0 && <p className="text-yellow-300 mt-2">Try importing questions or adding new ones!</p>}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Question Management Panel */}
          {adminMode && (
            <div className="mt-8 bg-black/40 backdrop-blur-lg rounded-3xl p-8 border-2 border-amber-400/30 shadow-2xl relative">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-amber-400 rotate-45"></div>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold text-amber-100">Question Management</h2>
                <button
                  onClick={() => setAdminMode(false)}
                  className="bg-black/60 hover:bg-black/80 text-amber-100 px-4 py-2 rounded-lg border border-amber-400/30"
                >
                  Close Manager
                </button>
              </div>

              {/* Current Questions List */}
              <div className="mb-8">
                <h3 className="text-lg font-semibold mb-4 text-amber-100">All Questions ({questions.length})</h3>
                <div className="space-y-2 max-h-80 overflow-y-auto">
                  {questions.map((q, index) => (
                    <div key={index} className="bg-black/30 p-4 rounded-lg flex justify-between items-center border border-amber-400/20">
                      <div className="flex-1">
                        <span className="text-sm text-amber-300">{q.category}</span>
                        <p className="font-medium text-amber-100">{q.question}</p>
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => setEditingQuestion(q)}
                          className="bg-amber-600 hover:bg-amber-700 text-black p-2 rounded-lg border border-amber-400"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => deleteQuestion(index)}
                          className="bg-red-600 hover:bg-red-700 text-white p-2 rounded-lg"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Add New Question Form */}
              <div className="border-t border-amber-400/20 pt-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center text-amber-100">
                  <Plus className="w-5 h-5 mr-2" />
                  Add New Question
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <input
                    type="text"
                    placeholder="Category"
                    value={newQuestion.category}
                    onChange={(e) => setNewQuestion({...newQuestion, category: e.target.value})}
                    className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                  />
                  <input
                    type="text"
                    placeholder="Answer"
                    value={newQuestion.answer}
                    onChange={(e) => setNewQuestion({...newQuestion, answer: e.target.value})}
                    className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                  />
                  <textarea
                    placeholder="Question"
                    value={newQuestion.question}
                    onChange={(e) => setNewQuestion({...newQuestion, question: e.target.value})}
                    className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50 md:col-span-2"
                    rows={2}
                  />
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium mb-2 text-amber-200">Options</label>
                    <div className="grid grid-cols-2 gap-2">
                      {newQuestion.options.map((option, index) => (
                        <input
                          key={index}
                          type="text"
                          placeholder={`Option ${String.fromCharCode(65 + index)}`}
                          value={option}
                          onChange={(e) => {
                            const newOptions = [...newQuestion.options];
                            newOptions[index] = e.target.value;
                            setNewQuestion({...newQuestion, options: newOptions});
                          }}
                          className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                        />
                      ))}
                    </div>
                  </div>
                  <textarea
                    placeholder="Explanation"
                    value={newQuestion.explanation}
                    onChange={(e) => setNewQuestion({...newQuestion, explanation: e.target.value})}
                    className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50 md:col-span-2"
                    rows={2}
                  />
                  <button
                    onClick={addQuestion}
                    className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors md:col-span-2 border border-emerald-400/50"
                  >
                    Add Question
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Edit Question Modal */}
          {editingQuestion && (
            <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
              <div className="bg-black/90 border-2 border-amber-400/30 rounded-2xl p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto relative">
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-amber-400 rotate-45"></div>
                <h3 className="text-xl font-bold mb-4 text-amber-100">Edit Question</h3>
                <div className="space-y-4">
                  <input
                    type="text"
                    placeholder="Category"
                    value={editingQuestion.category}
                    onChange={(e) => setEditingQuestion({...editingQuestion, category: e.target.value})}
                    className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                  />
                  <textarea
                    placeholder="Question"
                    value={editingQuestion.question}
                    onChange={(e) => setEditingQuestion({...editingQuestion, question: e.target.value})}
                    className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                    rows={3}
                  />
                  <div>
                    <label className="block text-sm font-medium mb-2 text-amber-200">Options</label>
                    <div className="grid grid-cols-2 gap-2">
                      {editingQuestion.options.map((option, index) => (
                        <input
                          key={index}
                          type="text"
                          placeholder={`Option ${String.fromCharCode(65 + index)}`}
                          value={option}
                          onChange={(e) => {
                            const newOptions = [...editingQuestion.options];
                            newOptions[index] = e.target.value;
                            setEditingQuestion({...editingQuestion, options: newOptions});
                          }}
                          className="bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                        />
                      ))}
                    </div>
                  </div>
                  <input
                    type="text"
                    placeholder="Answer"
                    value={editingQuestion.answer}
                    onChange={(e) => setEditingQuestion({...editingQuestion, answer: e.target.value})}
                    className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                  />
                  <textarea
                    placeholder="Explanation"
                    value={editingQuestion.explanation}
                    onChange={(e) => setEditingQuestion({...editingQuestion, explanation: e.target.value})}
                    className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                    rows={2}
                  />
                  <div className="flex space-x-4">
                    <button
                      onClick={() => {
                        const index = questions.findIndex(q => 
                          q.question === editingQuestion.question && 
                          q.category === editingQuestion.category
                        );
                        if (index !== -1) updateQuestion(index, editingQuestion);
                      }}
                      className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors border border-emerald-400/50"
                    >
                      Save Changes
                    </button>
                    <button
                      onClick={() => setEditingQuestion(null)}
                      className="flex-1 bg-black/60 hover:bg-black/80 text-amber-100 px-6 py-2 rounded-lg font-semibold transition-colors border border-amber-400/30"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  const currentQuestion = filteredQuestions[currentSlide];
  if (!currentQuestion) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-amber-900 text-white relative overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-br from-amber-100/5 via-transparent to-emerald-900/10"></div>
      <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-amber-400 via-yellow-300 to-amber-400"></div>
      <div className="relative z-10">
        {/* Header */}
        <div className="bg-black/40 backdrop-blur-sm border-b-2 border-amber-400/30 p-6">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <Trophy className="w-8 h-8 text-amber-300" />
            <h1 className="text-2xl font-bold text-amber-100">Host Control Panel</h1>
          </div>
          
          <div className="flex items-center space-x-6">
            {showQuestionCounter && (
              <div className="text-center">
                <div className="text-sm text-amber-300">Question</div>
                <div className="text-xl font-bold text-amber-100">{currentSlide + 1}/{filteredQuestions.length}</div>
              </div>
            )}
            
            <div className="text-center">
              <div className="text-sm text-amber-300">Timer</div>
              <div className={`text-2xl font-bold ${timer <= 10 ? 'text-red-400' : 'text-emerald-400'}`}>
                {timer}s
              </div>
            </div>
            
            <button
              onClick={endGame}
              className="bg-black/40 hover:bg-black/60 text-amber-100 px-4 py-2 rounded-lg border border-amber-400/30"
            >
              End Game
            </button>
          </div>
        </div>
        
        {/* Host Control Buttons */}
        <div className="bg-black/20 border-b border-amber-400/20 p-4">
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <button
                onClick={prevSlide}
                disabled={currentSlide === 0}
                className="bg-black/40 hover:bg-black/60 disabled:bg-black/20 disabled:opacity-50 text-amber-100 px-4 py-2 rounded-lg font-semibold transition-colors flex items-center justify-center border border-amber-400/30 hover:border-amber-400/50"
              >
                <ChevronLeft className="w-4 h-4 mr-2" />
                Previous
              </button>

              {(!firstQuestionStarted && showWaitScreen) ? (
                <button
                  onClick={timedRounds ? startTimer : showQuestion}
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center justify-center border border-emerald-400/50"
                >
                  <Play className="w-4 h-4 mr-2" />
                  {timedRounds ? 'Start Timer' : 'Show Question'}
                </button>
              ) : timedRounds && (
                <button
                  onClick={startTimer}
                  disabled={isTimerRunning}
                  className="bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-800 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center justify-center border border-emerald-400/50"
                >
                  <Play className="w-4 h-4 mr-2" />
                  {isTimerRunning ? 'Running...' : 'Start Timer'}
                </button>
              )}

              <button
                onClick={toggleBigScreenAnswer}
                className={`px-4 py-2 rounded-lg font-semibold transition-colors border ${
                  showAnswer 
                    ? 'bg-red-600 hover:bg-red-700 text-white border-red-400' 
                    : 'bg-emerald-600 hover:bg-emerald-700 text-white border-emerald-400'
                }`}
              >
                {showAnswer ? 'Hide Answer' : 'Show Answer'}
              </button>

              <button
                onClick={nextSlide}
                disabled={currentSlide === filteredQuestions.length - 1}
                className="bg-black/40 hover:bg-black/60 disabled:bg-black/20 disabled:opacity-50 text-amber-100 px-4 py-2 rounded-lg font-semibold transition-colors flex items-center justify-center border border-amber-400/30 hover:border-amber-400/50"
              >
                Next
                <ChevronRight className="w-4 h-4 ml-2" />
              </button>
            </div>
          </div>
        </div>
        </div>

        {/* Host Question Preview */}
        <div className="max-w-4xl mx-auto p-8">
          <div className="bg-black/40 backdrop-blur-lg rounded-2xl p-8 border-2 border-amber-400/30 shadow-2xl relative">
            <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-amber-400 rotate-45"></div>
            {/* Category Badge */}
            <div className="text-center mb-8">
              <span className="bg-gradient-to-r from-amber-400 to-yellow-400 text-black px-6 py-2 rounded-full text-lg font-semibold border-2 border-amber-300 shadow-lg">
              {currentQuestion.category}
              </span>
            </div>

            {/* Question */}
            <div className="text-center mb-12">
              <h2 className="text-4xl font-bold mb-8 leading-tight text-amber-100">
              {currentQuestion.question}
              </h2>
            </div>

            {/* Options */}
            <div className="grid grid-cols-2 gap-6 mb-12">
            {currentQuestion.options.map((option, index) => (
              <div
                key={index}
                className={`p-6 rounded-2xl border-2 text-center text-xl font-semibold transition-all duration-300 relative ${
                  option === currentQuestion.answer
                    ? 'bg-emerald-600/40 border-emerald-400 text-emerald-100 shadow-lg'
                    : 'bg-black/30 border-amber-400/30 hover:bg-black/50 hover:border-amber-400/50 text-amber-100'
                }`}
              >
                <div className="flex items-center justify-center space-x-3">
                  <span className="w-8 h-8 bg-amber-600 rounded-full flex items-center justify-center text-sm font-bold text-black border border-amber-400">
                    {String.fromCharCode(65 + index)}
                  </span>
                  <span>{option}</span>
                </div>
              </div>
            ))}
            </div>

            {/* Answer Explanation - Always visible in host mode */}
            <div className="bg-emerald-600/20 border-2 border-emerald-400/50 rounded-2xl p-6 mb-8 text-center relative">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-emerald-400 rotate-45"></div>
              <h3 className="text-2xl font-bold text-emerald-300 mb-3">
                Correct Answer: {currentQuestion.answer}
              </h3>
              <p className="text-lg text-emerald-100">{currentQuestion.explanation}</p>
              <div className="mt-4 text-sm text-emerald-200">
                Big Screen Answer: {showAnswer ? 'VISIBLE' : 'HIDDEN'}
              </div>
            </div>

            {/* Controls */}
            <div className="flex justify-center space-x-4">
              <button
                onClick={prevSlide}
                disabled={currentSlide === 0}
                className="bg-black/40 hover:bg-black/60 disabled:bg-black/20 disabled:opacity-50 text-amber-100 px-6 py-3 rounded-xl font-semibold transition-colors flex items-center border border-amber-400/30 hover:border-amber-400/50"
            >
              <ChevronLeft className="w-5 h-5 mr-2" />
              Previous
            </button>

            {(!firstQuestionStarted && showWaitScreen) ? (
              <button
                onClick={timedRounds ? startTimer : showQuestion}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors flex items-center border border-emerald-400/50"
              >
                <Play className="w-5 h-5 mr-2" />
                {timedRounds ? 'Start Timer' : 'Show Question'}
              </button>
            ) : timedRounds && !isTimerRunning ? (
              <button
                onClick={startTimer}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors flex items-center border border-emerald-400/50"
              >
                <Play className="w-5 h-5 mr-2" />
                Start Timer
              </button>
            ) : null}

            <button
              onClick={toggleBigScreenAnswer}
              className={`px-8 py-3 rounded-xl font-semibold transition-colors border ${
                showAnswer 
                  ? 'bg-red-600 hover:bg-red-700 text-white border-red-400'
                  : 'bg-emerald-600 hover:bg-emerald-700 text-white border-emerald-400'
              }`}
            >
              {showAnswer ? 'Hide Answer' : 'Show Answer'}
            </button>

              <button
                onClick={nextSlide}
                disabled={currentSlide === questions.length - 1}
                className="bg-black/40 hover:bg-black/60 disabled:bg-black/20 disabled:opacity-50 text-amber-100 px-6 py-3 rounded-xl font-semibold transition-colors flex items-center border border-amber-400/30 hover:border-amber-400/50"
            >
                Next
                <ChevronRight className="w-5 h-5 ml-2" />
              </button>
            </div>
          </div>

          {/* Admin Panel */}
          {adminMode && (
            <div className="mt-8 bg-black/40 backdrop-blur-lg rounded-3xl p-8 border-2 border-amber-400/30 relative">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-amber-400 rotate-45"></div>
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-2xl font-bold text-amber-100">Question Management</h3>
                <div className="flex space-x-2">
                <input
                  type="file"
                  accept=".json"
                  onChange={importQuestions}
                  className="hidden"
                  id="importFile"
                />
                <label
                  htmlFor="importFile"
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center cursor-pointer"
                >
                  <Upload className="w-4 h-4 mr-2" />
                  Import
                </label>
                <button
                  onClick={exportQuestions}
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Export
                </button>
              </div>
            </div>

            {/* Question List */}
            <div className="mb-8">
              <h4 className="text-lg font-semibold mb-4 text-amber-100">Current Questions ({questions.length})</h4>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {questions.map((q, index) => (
                  <div key={index} className="bg-black/30 p-4 rounded-lg flex justify-between items-center border border-amber-400/20">
                    <div className="flex-1">
                      <span className="text-sm text-amber-300">{q.category}</span>
                      <p className="font-medium text-amber-100">{q.question}</p>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setEditingQuestion(q)}
                        className="bg-amber-600 hover:bg-amber-700 text-black p-2 rounded-lg border border-amber-400"
                      >
                        <Edit className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => deleteQuestion(index)}
                        className="bg-red-600 hover:bg-red-700 text-white p-2 rounded-lg"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Add New Question Form */}
            <div className="border-t border-white/20 pt-6">
              <h4 className="text-lg font-semibold mb-4 flex items-center text-amber-100">
                <Plus className="w-5 h-5 mr-2" />
                Add New Question
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input
                  type="text"
                  placeholder="Category"
                  value={newQuestion.category}
                  onChange={(e) => setNewQuestion({...newQuestion, category: e.target.value})}
                  className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                />
                <input
                  type="text"
                  placeholder="Answer"
                  value={newQuestion.answer}
                  onChange={(e) => setNewQuestion({...newQuestion, answer: e.target.value})}
                  className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                />
                <textarea
                  placeholder="Question"
                  value={newQuestion.question}
                  onChange={(e) => setNewQuestion({...newQuestion, question: e.target.value})}
                  className="bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-white/50 md:col-span-2"
                  rows={2}
                />
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium mb-2 text-amber-200">Options</label>
                  <div className="grid grid-cols-2 gap-2">
                    {newQuestion.options.map((option, index) => (
                      <input
                        key={index}
                        type="text"
                        placeholder={`Option ${String.fromCharCode(65 + index)}`}
                        value={option}
                        onChange={(e) => {
                          const newOptions = [...newQuestion.options];
                          newOptions[index] = e.target.value;
                          setNewQuestion({...newQuestion, options: newOptions});
                        }}
                        className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                      />
                    ))}
                  </div>
                </div>
                <textarea
                  placeholder="Explanation"
                  value={newQuestion.explanation}
                  onChange={(e) => setNewQuestion({...newQuestion, explanation: e.target.value})}
                  className="bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-white/50 md:col-span-2"
                  rows={2}
                />
                <button
                  onClick={addQuestion}
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors md:col-span-2 border border-emerald-400/50"
                >
                  Add Question
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Edit Question Modal */}
        {editingQuestion && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
            <div className="bg-black/90 border-2 border-amber-400/30 rounded-2xl p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto relative">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-amber-400 rotate-45"></div>
              <h3 className="text-xl font-bold mb-4 text-amber-100">Edit Question</h3>
              <div className="space-y-4">
                <input
                  type="text"
                  placeholder="Category"
                  value={editingQuestion.category}
                  onChange={(e) => setEditingQuestion({...editingQuestion, category: e.target.value})}
                  className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                />
                <textarea
                  placeholder="Question"
                  value={editingQuestion.question}
                  onChange={(e) => setEditingQuestion({...editingQuestion, question: e.target.value})}
                  className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                  rows={3}
                />
                <div>
                  <label className="block text-sm font-medium mb-2 text-amber-200">Options</label>
                  <div className="grid grid-cols-2 gap-2">
                    {editingQuestion.options.map((option, index) => (
                      <input
                        key={index}
                        type="text"
                        placeholder={`Option ${String.fromCharCode(65 + index)}`}
                        value={option}
                        onChange={(e) => {
                          const newOptions = [...editingQuestion.options];
                          newOptions[index] = e.target.value;
                          setEditingQuestion({...editingQuestion, options: newOptions});
                        }}
                        className="bg-black/30 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                      />
                    ))}
                  </div>
                </div>
                <input
                  type="text"
                  placeholder="Answer"
                  value={editingQuestion.answer}
                  onChange={(e) => setEditingQuestion({...editingQuestion, answer: e.target.value})}
                  className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                />
                <textarea
                  placeholder="Explanation"
                  value={editingQuestion.explanation}
                  onChange={(e) => setEditingQuestion({...editingQuestion, explanation: e.target.value})}
                  className="w-full bg-black/40 border border-amber-400/30 rounded-lg px-4 py-2 text-amber-100 placeholder-amber-200/50"
                  rows={2}
                />
                <div className="flex space-x-4">
                  <button
                    onClick={() => {
                      const index = questions.findIndex(q => 
                        q.question === editingQuestion.question && 
                        q.category === editingQuestion.category
                      );
                      if (index !== -1) updateQuestion(index, editingQuestion);
                    }}
                    className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors border border-emerald-400/50"
                  >
                    Save Changes
                  </button>
                  <button
                    onClick={() => setEditingQuestion(null)}
                    className="flex-1 bg-black/60 hover:bg-black/80 text-amber-100 px-6 py-2 rounded-lg font-semibold transition-colors border border-amber-400/30"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        </div>
      </div>
    </div>
  );
};

export default TriviaApp;